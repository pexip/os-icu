Description: fix denial of service or possible code execution in
 regular expressions
Origin: backport, http://bugs.icu-project.org/trac/changeset/36727
Bug: http://bugs.icu-project.org/trac/ticket/11369
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=776265

Index: icu-4.8.1.1/source/i18n/regexcmp.cpp
===================================================================
--- icu-4.8.1.1.orig/source/i18n/regexcmp.cpp	2015-02-27 15:56:24.694080334 -0500
+++ icu-4.8.1.1/source/i18n/regexcmp.cpp	2015-02-27 15:56:24.694080334 -0500
@@ -2369,7 +2369,15 @@
     int32_t   topOfBlock = blockTopLoc(FALSE);
     if (fIntervalUpper == 0) {
         // Pathological case.  Attempt no matches, as if the block doesn't exist.
+        // Discard the generated code for the block.
+        // If the block included parens, discard the info pertaining to them as well.
         fRXPat->fCompiledPat->setSize(topOfBlock);
+        if (fMatchOpenParen >= topOfBlock) {
+            fMatchOpenParen = -1;
+        }
+        if (fMatchCloseParen >= topOfBlock) {
+            fMatchCloseParen = -1;
+        }
         return TRUE;
     }
 
Index: icu-4.8.1.1/source/i18n/regexcmp.h
===================================================================
--- icu-4.8.1.1.orig/source/i18n/regexcmp.h	2015-02-27 15:56:24.694080334 -0500
+++ icu-4.8.1.1/source/i18n/regexcmp.h	2015-02-27 15:56:24.694080334 -0500
@@ -183,7 +183,9 @@
     int32_t                       fMatchOpenParen;   // The position in the compiled pattern
                                                      //   of the slot reserved for a state save
                                                      //   at the start of the most recently processed
-                                                     //   parenthesized block.
+                                                     //   parenthesized block. Updated when processing
+                                                     //   a close to the location for the corresponding open.
+
     int32_t                       fMatchCloseParen;  // The position in the pattern of the first
                                                      //   location after the most recently processed
                                                      //   parenthesized block.
Index: icu-4.8.1.1/source/test/testdata/regextst.txt
===================================================================
--- icu-4.8.1.1.orig/source/test/testdata/regextst.txt	2015-02-27 15:56:24.694080334 -0500
+++ icu-4.8.1.1/source/test/testdata/regextst.txt	2015-02-27 15:56:24.694080334 -0500
@@ -1058,6 +1058,15 @@
 "^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$"   G "<0>bob.smith@foo.tv</0>"
 "^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$"     "joe"
 
+# Bug 11369
+#   Incorrect optimization of patterns with a zero length quantifier {0}
+
+"(.|b)(|b){0}\$(?#xxx){3}(?>\D*)"   "AAAAABBBBBCCCCCDDDDEEEEE"
+"(|b)ab(c)"                     "<0><1></1>ab<2>c</2></0>"
+"(|b){0}a{3}(D*)"               "<0>aaa<2></2></0>"
+"(|b){0,1}a{3}(D*)"             "<0><1></1>aaa<2></2></0>"
+"((|b){0})a{3}(D*)"             "<0><1></1>aaa<3></3></0>"
+
 # Bug 11370
 #   Max match length computation of look-behind expression gives result that is too big to fit in the
 #   in the 24 bit operand portion of the compiled code. Expressions should fail to compile
@@ -1065,6 +1074,7 @@
 
 "(?<!(0123456789a){10000000})x"         E  "no match"
 "(?<!\\ubeaf(\\ubeaf{11000}){11000})"   E  "no match"
+
 "^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$"     "@foo.com"
 "^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$"     "a@a"
 "^\d{1,2}\/\d{1,2}\/\d{4}$"   G "<0>4/1/2001</0>"
