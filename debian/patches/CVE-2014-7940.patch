Description: fix denial of service or possible code execution via
 uninitialized memory in the collator implementation
Origin: other, https://chromium.googlesource.com/chromium/deps/icu/+/a626a75aad2675254073366fcaa9465dacf17100/patches/col.patch
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=776265
Bug-Google: https://code.google.com/p/chromium/issues/detail?id=433866

Updated by Marc Deslauriers <marc.deslauriers@canonical.com> to also fix a
regression when running the test suite because source->endp was being
used without checking UCOL_ITER_HASLEN.

Index: icu-4.8.1.1/source/i18n/ucol.cpp
===================================================================
--- icu-4.8.1.1.orig/source/i18n/ucol.cpp	2015-03-04 11:06:45.177089567 -0500
+++ icu-4.8.1.1/source/i18n/ucol.cpp	2015-03-04 11:12:52.092204028 -0500
@@ -2317,6 +2317,9 @@
         if (data->pos + 1 == data->endp) {
             return *(data->pos ++);
         }
+        if (data->pos >= data->endp) {
+            return (UChar) -1; // return U+FFFF (non-char) to indicate an error
+        }
     }
     else {
         if (innormbuf) {
@@ -2878,8 +2881,16 @@
                                     goBackOne(source);
                                 }
                             }
-                        } else if (U16_IS_LEAD(schar)) {
-                            miss = U16_GET_SUPPLEMENTARY(schar, getNextNormalizedChar(source));
+                        } else if (U16_IS_LEAD(schar) &&
+                                   ((source->flags & UCOL_ITER_HASLEN) == 0 ||
+                                    source->pos + 1 < source->endp)) {
+                            const UChar* prevPos = source->pos;
+                            UChar nextChar = getNextNormalizedChar(source);
+                            if (U16_IS_TRAIL(nextChar)) {
+                                miss = U16_GET_SUPPLEMENTARY(schar, nextChar);
+                            } else if (prevPos < source->pos) {
+                                goBackOne(source);
+                            }
                         }
 
                         uint8_t sCC;
