Description: fix information disclosure via incorrect font file parsing
Origin: backport, http://bugs.icu-project.org/trac/changeset/37086
Bug: http://bugs.icu-project.org/trac/ticket/11525
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=776264

Index: icu-52.1/source/layout/ContextualSubstSubtables.cpp
===================================================================
--- icu-52.1.orig/source/layout/ContextualSubstSubtables.cpp	2013-10-04 16:54:52.000000000 -0400
+++ icu-52.1/source/layout/ContextualSubstSubtables.cpp	2015-02-27 09:17:11.031727861 -0500
@@ -466,6 +466,12 @@
                 const ChainSubClassRuleTable *chainSubClassRuleTable =
                     (const ChainSubClassRuleTable *) ((char *) chainSubClassSetTable + chainSubClassRuleTableOffset);
                 le_uint16 backtrackGlyphCount = SWAPW(chainSubClassRuleTable->backtrackGlyphCount);
+
+                // TODO: Ticket #11557 - enable this check, originally from ticket #11525.
+                //       Depends on other, more extensive, changes.
+                // LEReferenceToArrayOf<le_uint16>   backtrackClassArray(base, success, chainSubClassRuleTable->backtrackClassArray, backtrackGlyphCount);
+                if( LE_FAILURE(success) ) { return 0; }
+
                 le_uint16 inputGlyphCount = SWAPW(chainSubClassRuleTable->backtrackClassArray[backtrackGlyphCount]) - 1;
                 const le_uint16 *inputClassArray = &chainSubClassRuleTable->backtrackClassArray[backtrackGlyphCount + 1];
                 le_uint16 lookaheadGlyphCount = SWAPW(inputClassArray[inputGlyphCount]);
Index: icu-52.1/source/layout/CursiveAttachmentSubtables.cpp
===================================================================
--- icu-52.1.orig/source/layout/CursiveAttachmentSubtables.cpp	2013-10-04 16:54:56.000000000 -0400
+++ icu-52.1/source/layout/CursiveAttachmentSubtables.cpp	2015-02-27 09:17:11.035727894 -0500
@@ -20,7 +20,10 @@
     le_int32  coverageIndex = getGlyphCoverage(base, glyphID, success);
     le_uint16 eeCount       = SWAPW(entryExitCount);
 
-    if (coverageIndex < 0 || coverageIndex >= eeCount) {
+    LEReferenceToArrayOf<EntryExitRecord>
+        entryExitRecordsArrayRef(base, success, entryExitRecords, coverageIndex);
+
+    if (coverageIndex < 0 || coverageIndex >= eeCount || LE_FAILURE(success)) {
         glyphIterator->setCursiveGlyph();
         return 0;
     }
Index: icu-52.1/source/layout/Features.cpp
===================================================================
--- icu-52.1.orig/source/layout/Features.cpp	2013-10-04 16:54:56.000000000 -0400
+++ icu-52.1/source/layout/Features.cpp	2015-02-27 09:17:11.035727894 -0500
@@ -15,6 +15,9 @@
 
 LEReferenceTo<FeatureTable> FeatureListTable::getFeatureTable(const LETableReference &base, le_uint16 featureIndex, LETag *featureTag, LEErrorCode &success) const
 {
+    LEReferenceToArrayOf<FeatureRecord>
+        featureRecordArrayRef(base, success, featureRecordArray, featureIndex);
+
   if (featureIndex >= SWAPW(featureCount) || LE_FAILURE(success)) {
     return LEReferenceTo<FeatureTable>();
   }
Index: icu-52.1/source/layout/LETableReference.h
===================================================================
--- icu-52.1.orig/source/layout/LETableReference.h	2013-10-04 16:54:56.000000000 -0400
+++ icu-52.1/source/layout/LETableReference.h	2015-02-27 09:17:11.035727894 -0500
@@ -313,7 +313,12 @@
   const T *getAliasRAW() const { LE_DEBUG_TR("getAliasRAW<>"); return (const T*)fStart; }
 
   const T& getObject(le_uint32 i, LEErrorCode &success) const {
-    return *getAlias(i,success);
+      const T *ret = getAlias(i, success);
+      if (LE_FAILURE(success) || ret==NULL) {
+          return *(new T(0));
+      } else {
+          return *ret;
+     }
   }
   
   const T& operator()(le_uint32 i, LEErrorCode &success) const {
Index: icu-52.1/source/layout/LigatureSubstSubtables.cpp
===================================================================
--- icu-52.1.orig/source/layout/LigatureSubstSubtables.cpp	2013-10-04 16:54:54.000000000 -0400
+++ icu-52.1/source/layout/LigatureSubstSubtables.cpp	2015-02-27 09:17:11.035727894 -0500
@@ -27,6 +27,9 @@
             Offset ligTableOffset = SWAPW(ligSetTable->ligatureTableOffsetArray[lig]);
             const LigatureTable *ligTable = (const LigatureTable *) ((char *)ligSetTable + ligTableOffset);
             le_uint16 compCount = SWAPW(ligTable->compCount) - 1;
+            LEReferenceToArrayOf<TTGlyphID>
+                componentArrayRef(base, success, ligTable->componentArray, compCount);
+            if (LE_FAILURE(success)) { return 0; }
             le_int32 startPosition = glyphIterator->getCurrStreamPosition();
             TTGlyphID ligGlyph = SWAPW(ligTable->ligGlyph);
             le_uint16 comp;
Index: icu-52.1/source/layout/MultipleSubstSubtables.cpp
===================================================================
--- icu-52.1.orig/source/layout/MultipleSubstSubtables.cpp	2013-10-04 16:54:54.000000000 -0400
+++ icu-52.1/source/layout/MultipleSubstSubtables.cpp	2015-02-27 09:17:11.035727894 -0500
@@ -35,7 +35,12 @@
 
     le_int32 coverageIndex = getGlyphCoverage(base, glyph, success);
     le_uint16 seqCount = SWAPW(sequenceCount);
+    LEReferenceToArrayOf<Offset>
+        sequenceTableOffsetArrayRef(base, success, sequenceTableOffsetArray, seqCount);
 
+    if (LE_FAILURE(success)) {
+        return 0;
+    }
     if (coverageIndex >= 0 && coverageIndex < seqCount) {
         Offset sequenceTableOffset = SWAPW(sequenceTableOffsetArray[coverageIndex]);
         const SequenceTable *sequenceTable = (const SequenceTable *) ((char *) this + sequenceTableOffset);
